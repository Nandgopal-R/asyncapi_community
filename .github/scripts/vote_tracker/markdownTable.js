/**
 * Replaces voting status values with corresponding emoji icons wrapped in a tooltip span.
 *
 * @param {string} value - The vote status (e.g., "In favor", "Abstain", etc.)
 * @returns {string} - HTML string with emoji and tooltip
 */
function renderVoteIcon(value) {
  const icons = {
    "In favor": "👍",
    Against: "👎",
    Abstain: "👀",
    "Not participated": "🔕",
  };
  return `<span style="position: relative; cursor: pointer;" title="${value}">${icons[value] || value}</span>`;
}

/**
 * Generates a Markdown table header cell, optionally with a tooltip or GitHub issue link.
 *
 * @param {string} key - The key to display in the header
 * @param {Object} titles - A mapping of keys to human-readable descriptions
 * @param {string} orgName - GitHub organization name
 * @param {string} repoName - GitHub repository name
 * @returns {string} - Markdown/HTML string for header cell
 */
function renderHeaderCell(key, titles, orgName, repoName) {
  if (key.includes("$$")) {
    const [title, issueNumber] = key.split("$$");
    return `[${title}](https://github.com/${orgName}/${repoName}/issues/${issueNumber})`;
  }

  const tooltip = titles[key] || key;
  return `<span style="position: relative; cursor: pointer;" title="${tooltip}">${key}</span>`;
}

/**
 * Generates the Markdown header row and separator row for a table.
 *
 * @param {string[]} keys - The list of keys to include as columns
 * @param {Object} titles - Tooltip descriptions for each key
 * @param {string} orgName - GitHub organization name
 * @param {string} repoName - GitHub repository name
 * @returns {string} - Markdown header and separator rows
 */
function generateMarkdownHeader(keys, titles, orgName, repoName) {
  const headerRow = "| " + keys.map(key => renderHeaderCell(key, titles, orgName, repoName)).join(" | ") + " |";
  const separatorRow = "| " + keys.map(() => "---").join(" | ") + " |";
  return `${headerRow}\n${separatorRow}`;
}

/**
 * Generates all Markdown table rows for the given data.
 *
 * @param {Object[]} data - Array of objects representing table rows
 * @param {string[]} keys - Keys to render as columns
 * @returns {string} - Markdown table body
 */
function generateMarkdownRows(data, keys) {
  return data.map(row => {
    const rowStr = keys.map(key => {
      if (key === "name") {
        return `[${row[key]}](https://github.com/${row[key]})`;
      }
      if (key.includes("$$")) {
        return renderVoteIcon(row[key]);
      }
      return row[key];
    }).join(" | ");
    return `| ${rowStr} |`;
  }).join("\n");
}

/**
 * Normalizes each object in the dataset to ensure all keys are present.
 *
 * @param {Object[]} data - The array of raw data objects
 * @param {string[]} keys - The expected keys for the table
 * @returns {Object[]} - Normalized data with missing keys set to "N/A"
 */
function normalizeTableData(data, keys) {
  return data.map((item) => {
    const normalized = {};
    keys.forEach((key) => {
      normalized[key] = item[key] !== undefined ? item[key] : "N/A";
    });
    return normalized;
  });
}

/**
 * Converts an array of voting records into a Markdown-formatted table.
 *
 * @param {Object[]} data - The voting data array (each item is a row)
 * @param {string} orgName - GitHub organization name
 * @param {string} repoName - GitHub repository name
 * @returns {Promise<string>} - A Promise resolving to the complete Markdown table
 */
async function jsonToMarkdownTable(data, orgName, repoName) {
  if (!data || data.length === 0) {
    console.error("Data is empty or undefined");
    return "";
  }

  const titles = {
    name: "GitHub user name",
    lastParticipatedVoteTime: "Last time the TSC member participated in a vote",
    hasVotedInLast3Months: "Flag indicating if TSC member voted in last 3 months...",
    lastVoteClosedTime: "Date when last vote was closed...",
    agreeCount: "Number of times TSC member agreed in a vote.",
    disagreeCount: "Number of times TSC member did not agree in a vote.",
    abstainCount: "Number of times TSC member abstained from voting.",
    notParticipatingCount: "Number of times TSC member did not participate in voting.",
  };

  const keys = Object.keys(data[0]).filter(k => k !== "firstVoteClosedTime");
  const normalizedData = normalizeTableData(data, keys);

  let markdown = `<!-- This file is generated by a script. Do not manually update it unless there is a visible mistake and point to the script that is responsible for updating the document. -->\n`;

  markdown += generateMarkdownHeader(keys, titles, orgName, repoName) + "\n";
  markdown += generateMarkdownRows(normalizedData, keys);

  return markdown;
}

module.exports = {
  jsonToMarkdownTable,
  renderVoteIcon,
  renderHeaderCell,
  generateMarkdownHeader,
  generateMarkdownRows,
};

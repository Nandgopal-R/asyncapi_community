function normalizeTableData(data, keys) {
  return data.map((item) => {
    const normalized = {};
    keys.forEach((key) => {
      normalized[key] = item[key] !== undefined ? item[key] : "N/A";
    });
    return normalized;
  });
}

function renderVoteIcon(value) {
  const icons = {
    "In favor": "👍",
    Against: "👎",
    Abstain: "👀",
    "Not participated": "🔕",
  };
  return `<span style="position: relative; cursor: pointer;" title="${value}">${icons[value] || value}</span>`;
}

function renderHeaderCell(key, titles, orgName, repoName) {
  if (key.includes("$$")) {
    const [title, issueNumber] = key.split("$$");
    return `[${title}](https://github.com/${orgName}/${repoName}/issues/${issueNumber})`;
  }

  const tooltip = titles[key] || key;
  return `<span style="position: relative; cursor: pointer;" title="${tooltip}">${key}</span>`;
}

function generateMarkdownHeader(keys, titles, orgName, repoName) {
  const headerRow = "| " + keys.map(key => renderHeaderCell(key, titles, orgName, repoName)).join(" | ") + " |";
  const separatorRow = "| " + keys.map(() => "---").join(" | ") + " |";
  return `${headerRow}\n${separatorRow}`;
}

function generateMarkdownRows(data, keys) {
  return data.map(row => {
    const rowStr = keys.map(key => {
      if (key === "name") {
        return `[${row[key]}](https://github.com/${row[key]})`;
      }
      if (key.includes("$$")) {
        return renderVoteIcon(row[key]);
      }
      return row[key];
    }).join(" | ");
    return `| ${rowStr} |`;
  }).join("\n");
}

export async function jsonToMarkdownTable(data, orgName, repoName) {
  if (!data || data.length === 0) {
    console.error("Data is empty or undefined");
    return "";
  }

  const titles = {
    name: "GitHub user name",
    lastParticipatedVoteTime: "Last time the TSC member participated in a vote",
    hasVotedInLast3Months: "Flag indicating if TSC member voted in last 3 months...",
    lastVoteClosedTime: "Date when last vote was closed...",
    agreeCount: "Number of times TSC member agreed in a vote.",
    disagreeCount: "Number of times TSC member did not agree in a vote.",
    abstainCount: "Number of times TSC member abstained from voting.",
    notParticipatingCount: "Number of times TSC member did not participate in voting.",
  };

  const keys = Object.keys(data[0]).filter(k => k !== "firstVoteClosedTime");
  const normalizedData = normalizeTableData(data, keys);

  let markdown = `<!-- This file is generated by a script. Do not manually update it unless there is a visible mistake and point to the script that is responsible for updating the document. -->\n`;

  markdown += generateMarkdownHeader(keys, titles, orgName, repoName) + "\n";
  markdown += generateMarkdownRows(normalizedData, keys);

  return markdown;
}
